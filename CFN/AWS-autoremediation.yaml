---
AWSTemplateFormatVersion: 2010-09-09
Description: "AWS Autoremediation 2.0"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterLabels:
      NetskopeTenantFQDN:
        default: Netskope Tenant FQDN
      NetskopeAPIToken:
        default: Netskope API v1 token

Parameters:
  NetskopeTenantFQDN:
    Default: ""
    Description: 'Your Netskope tenant FQDN. For example, example.goskope.com'
    Type: String
  NetskopeAPIToken:
    Default: ""
    Description: 'Netskope API v1 token'
    Type: String
Mappings:
      SourceCode:
          General:
              S3Bucket: 'yd-source-us-west-2'
              S3Prefix: "AWSAutoremediation"

Resources:
  AssesmentResultsS3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      Tags:
        -
          Key: Usage
          Value: NetskopeSecurityAssesmentResultsBucket
  APISecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Description: Netskope API secret token
      SecretString: !Sub '{"token":"${NetskopeAPIToken}"}'
      Tags:
        -
          Key: Name
          Value: NetskopeAPIToken

  GetNetskopeSCMPResultsLFRole:
      Type: 'AWS::IAM::Role'
      Properties: 
        RoleName: !Sub "GetNetskopeSCMPResultsLFRole_${AWS::Region}"
        Tags: 
          - Key: Type
            Value: GetNetskopeSCMPResultsLFRole
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: '/'
        Policies:
            - PolicyName: !Sub "GetNetskopeSCMPResultsLFPolicy_${AWS::Region}"
              PolicyDocument:
                Statement:
                  - Effect: Allow
                    Action:
                      - "logs:CreateLogGroup"
                      - "logs:CreateLogStream"
                      - "logs:PutLogEvents"
                    Resource:
                      - "*"
                  - Effect: Allow
                    Action:
                      - 's3:PutObject'
                    Resource:
                      - !Join
                        - '/'
                        - - !GetAtt AssesmentResultsS3Bucket.Arn
                          - '*'
                  - Effect: Allow
                    Action:
                      - 'secretsmanager:GetSecretValue'
                      - 'secretsmanager:DescribeSecret'
                    Resource: !Ref APISecret

  GetNetskopeSCMPResultsLF:
      Type: 'AWS::Lambda::Function'
      Properties:
        Description: >-
          This lambda function calls Netskope API to retrieve AWS security assesment results and save them in the S3 bucket.
        Handler: 'lambda_function.lambda_handler'
        Role: !GetAtt GetNetskopeSCMPResultsLFRole.Arn
        Code:
          S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
          S3Key: !Join ['/', [!FindInMap ["SourceCode", "General", "S3Prefix"], 'GetNetskopeSecurityPostureAssesmentLambda.zip']]
        Environment:
          Variables:
            tenant_fqdn: !Ref NetskopeTenantFQDN
            security_assessment_results_s3_bucket: !Ref AssesmentResultsS3Bucket
            api_token: !Ref APISecret
            LOGLEVEL: 'INFO'
        Runtime: python3.8
        MemorySize: 128
        Timeout: 300
        Tags: 
          - Key: Type
            Value: GetNetskopeSCMPResultsLF

  EventRuleScheduledVPCFlowLogs: 
    Type: AWS::Events::Rule
    DependsOn: GetNetskopeSCMPResultsLF
    Properties: 
      Name: CIS-1-4-0-3-9-VPCFlowLogs-GetResultsFromNetskope
      Description: "Scheduled event Rule for GetNetskopeSCMPResultsLF Lambda function - VPC flow logs rule"
      ScheduleExpression: "rate(10 minutes)"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "GetNetskopeSCMPResultsLF"
              - "Arn"
          Id: "GetNetskopeSCMPResultsLF"
          Input: '{"rule_name":"Baseline network operations and data flows: Ensure VPC flow logging is enabled in all VPCs","rule_short_name":"CIS-1-4-0-3-9"}'

  EventRuleScheduledSecurityGroupPort22: 
    Type: AWS::Events::Rule
    DependsOn: GetNetskopeSCMPResultsLF
    Properties: 
      Name: CIS-1-2-0-4-1-SecurityGroups22-GetResultsFromNetskope
      Description: "Scheduled event Rule for GetNetskopeSCMPResultsLF Lambda function - port 22 wide open rule"
      ScheduleExpression: "rate(10 minutes)"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "GetNetskopeSCMPResultsLF"
              - "Arn"
          Id: "GetNetskopeSCMPResultsLF"
          Input: '{"rule_name":"Communications and control network protection: Ensure no security groups allow ingress from 0.0.0.0/0 to port 22","rule_short_name":"CIS-1-2-0-4-1"}'

  CIS14039VPCFlowLogsLambdaRole:
      Type: 'AWS::IAM::Role'
      Properties: 
        RoleName: !Sub "CIS-1-4-0-3-9-VPCFlowLogsLambdaRole_${AWS::Region}"
        Tags: 
          - Key: Type
            Value: CIS-1-4-0-3-9-VPCFlowLogsLambdaRole
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: '/'
        Policies:
            - PolicyName: !Sub "CIS-1-4-0-3-9-VPCFlowLogsLambdaPolicy_${AWS::Region}"
              PolicyDocument:
                Statement:
                  - Effect: Allow
                    Action:
                      - "logs:CreateLogGroup"
                      - "logs:CreateLogStream"
                      - "logs:PutLogEvents"
                    Resource:
                      - "*"
                  - Effect: Allow
                    Action:
                      - 's3:GetObject'
                    Resource:
                       - !Join
                        - '/'
                        - - !GetAtt AssesmentResultsS3Bucket.Arn
                          - '*'
                        
            
  CIS14039VPCFlowLogsLambda:
      Type: 'AWS::Lambda::Function'
      DependsOn: CIS14039VPCFlowLogsLambdaRole
      Properties:
        Description: >-
          This lambda function called for the Netskope findings for CIS-1-4-0-3-9 and enables VPC flow logs.
        Handler: 'lambda_function.lambda_handler'
        Role: !GetAtt CIS14039VPCFlowLogsLambdaRole.Arn
        Code:
          S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
          S3Key: !Join ['/', [!FindInMap ["SourceCode", "General", "S3Prefix"], 'CIS-1-4-0-3-9-EnableVPCFlowLogsLambda.zip']]
        Environment:
          Variables:
            AWS_PARTITION: aws
            LOGLEVEL: 'INFO'
            AssesmentResultsS3Bucket: !Ref AssesmentResultsS3Bucket
        Runtime: python3.8
        MemorySize: 128
        Timeout: 300
        Tags: 
          - Key: Type
            Value: CIS14039VPCFlowLogsLambda

  PermissionToInvokeCIS14039VPCFlowLogsLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "CIS14039VPCFlowLogsLambda"
      Action: "lambda:InvokeFunction"
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt AssesmentResultsS3Bucket.Arn
  
  PutS3BucketEventLambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetBucketNotification'
                  - 's3:PutBucketNotification'
                Resource: !Sub 'arn:aws:s3:::${AssesmentResultsS3Bucket}'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

  PutS3BucketEventLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt PutS3BucketEventLambdaIAMRole.Arn
      Code:
        ZipFile: |

            from __future__ import print_function
            import json
            import boto3
            import cfnresponse
            
            SUCCESS = "SUCCESS"
            FAILED = "FAILED"
            
            print('Loading function')
            s3 = boto3.resource('s3')
            
            def lambda_handler(event, context):
                print("Received event: " + json.dumps(event, indent=2))
                responseData={}
                try:
                    if event['RequestType'] == 'Delete':
                        print("Request Type:",event['RequestType'])
                        Bucket=event['ResourceProperties']['Bucket']
                        delete_notification(Bucket)
                        print("Sending response to custom resource after Delete")
                    elif event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                        print("Request Type:",event['RequestType'])
                        LambdaArn=event['ResourceProperties']['LambdaArn']
                        Bucket=event['ResourceProperties']['Bucket']
                        prefix=event['ResourceProperties']['prefix']
                        add_notification(LambdaArn, Bucket, prefix)
                        responseData={'Bucket':Bucket}
                        print("Sending response to custom resource")
                    responseStatus = 'SUCCESS'
                except Exception as e:
                    print('Failed to process:', e)
                    responseStatus = 'FAILED'
                    responseData = {'Failure': 'Something bad happened.'}
                cfnresponse.send(event, context, responseStatus, responseData)

            def add_notification(LambdaArn, Bucket, prefix):
                bucket_notification = s3.BucketNotification(Bucket)
                response = bucket_notification.put(
                  NotificationConfiguration={
                    'LambdaFunctionConfigurations': [
                      {
                          'LambdaFunctionArn': LambdaArn,
                          'Events': [
                              's3:ObjectCreated:*'
                          ],
                          'Filter': {
                              'Key': {
                                  'FilterRules': [
                                      {
                                          'Name': 'prefix',
                                          'Value': prefix
                                      },
                                  ]
                              }
                          }
                      }
                    ]
                  }
                )
                print("Put request completed....")
              
            def delete_notification(Bucket):
                bucket_notification = s3.BucketNotification(Bucket)
                response = bucket_notification.put(
                    NotificationConfiguration={}
                )
                print("Delete request completed....")
      Runtime: python3.6
      Timeout: 50

  CIS14039VPCFlowLogsPutS3BucketEventLambdaFunctionTrigger:
    Type: 'Custom::LambdaTrigger'
    DependsOn: PermissionToInvokeCIS14039VPCFlowLogsLambda
    Properties:
      ServiceToken: !GetAtt PutS3BucketEventLambdaFunction.Arn
      LambdaArn: !GetAtt CIS14039VPCFlowLogsLambda.Arn
      Bucket: !Ref AssesmentResultsS3Bucket
      prefix: "CIS-1-4-0-3-9"

  CIS12041SecurityGroupsPort22LambdaRole:
      Type: 'AWS::IAM::Role'
      Properties: 
        RoleName: !Sub "CIS-1-2-0-4-1-SecurityGroupsPort22LambdaRole_${AWS::Region}"
        Tags: 
          - Key: Type
            Value: CIS-1-2-0-4-1-SecurityGroupsPort22LambdaRole
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: '/'
        Policies:
            - PolicyName: !Sub "CIS-1-2-0-4-1-SecurityGroupsPort22LambdaPolicy_${AWS::Region}"
              PolicyDocument:
                Statement:
                  - Effect: Allow
                    Action:
                      - "logs:CreateLogGroup"
                      - "logs:CreateLogStream"
                      - "logs:PutLogEvents"
                    Resource:
                      - "*"
                  - Effect: Allow
                    Action:
                      - 's3:GetObject'
                    Resource:
                       - !Join
                        - '/'
                        - - !GetAtt AssesmentResultsS3Bucket.Arn
                          - '*'
            
  CIS12041SecurityGroupsPort22Lambda:
      Type: 'AWS::Lambda::Function'
      DependsOn: CIS12041SecurityGroupsPort22LambdaRole
      Properties:
        Description: >-
          This lambda function called for the Netskope findings for CIS-1-2-0-4-1 and disables wide open port 22 in the security groups.
        Handler: 'lambda_function.lambda_handler'
        Role: !GetAtt CIS12041SecurityGroupsPort22LambdaRole.Arn
        Code:
          S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
          S3Key: !Join ['/', [!FindInMap ["SourceCode", "General", "S3Prefix"], 'CIS-1-2-0-4-1-SecurityGroupsPort22Lambda.zip']]
        Environment:
          Variables:
            AWS_PARTITION: aws
            LOGLEVEL: 'INFO'
            AssesmentResultsS3Bucket: !Ref AssesmentResultsS3Bucket
        Runtime: python3.8
        MemorySize: 128
        Timeout: 300
        Tags: 
          - Key: Type
            Value: CIS12041SecurityGroupsPort22Lambda

  PermissionToInvokeCIS12041SecurityGroupsPort22Lambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "CIS12041SecurityGroupsPort22Lambda"
      Action: "lambda:InvokeFunction"
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt AssesmentResultsS3Bucket.Arn

  CIS12041SecurityGroupsPort22PutS3BucketEventLambdaFunctionTrigger:
    Type: 'Custom::LambdaTrigger'
    DependsOn: PermissionToInvokeCIS12041SecurityGroupsPort22Lambda
    Properties:
      ServiceToken: !GetAtt PutS3BucketEventLambdaFunction.Arn
      LambdaArn: !GetAtt CIS12041SecurityGroupsPort22Lambda.Arn
      Bucket: !Ref AssesmentResultsS3Bucket
      prefix: "CIS-1-2-0-4-1"

  

Outputs:
  AssesmentResultsS3Bucket:
    Value: !Ref AssesmentResultsS3Bucket
    Description: Name of the Netskope Security Assesment results S3 bucket
  CIS14039VPCFlowLogsLambdaRole:
    Description: VPC Flow logs remediation Lambda Execution Role
    Value: !GetAtt CIS14039VPCFlowLogsLambdaRole.Arn
  CIS14039VPCFlowLogsLambda:
    Description: Lambda to Enable VPC Flow Logs
    Value: !GetAtt CIS14039VPCFlowLogsLambda.Arn
  CIS12041SecurityGroupsPort22LambdaRole:
    Description: Security Groups port 22 remediation Lambda Execution Role
    Value: !GetAtt CIS12041SecurityGroupsPort22LambdaRole.Arn
  CIS12041SecurityGroupsPort22Lambda:
    Description: Lambda to disable wode open port 22 in Security Groups
    Value: !GetAtt CIS12041SecurityGroupsPort22Lambda.Arn
  
